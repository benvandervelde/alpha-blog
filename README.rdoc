**GIT**

git --version

git config --global user.name "Ben"
git config --global user.email "bravo@yahoo.co.uk"

git config
git config --list


initialize git:

git init

****git add -A
****'tracks files

****git status
****'lists tracked files

****git commit -m "Create rails app and setup homepage"
'saves in git with a message

****git push

git checkout -f


**HEROKU**

login to heroku
create app in heroku:
  -> heroku create
push app to heroku:
  -> git push heroku master
  
rename app:
  -> heroku rename ...



Need to be able to:
  1. Create
  2. Read
  3. Update
  4. Delete
  C-R-U-D

generates a database:
  -> rails generate scaffold Article title:string description:text

run migration file to create the actual table:
  -> rake db:migrate  
  


Naming convention in Rails:

model name: Article
model name - > singular, first letter uppercase (Article)
table name - > plural, lower case of model name (articles)
model name filename -> all lowercase but singular (article.rb)
controller name -> plural of model (articles_controller.rb)

i.e.
model name: USER
table name: users
model name filename: user.rb
controller name: users_controller.rb

***to create table:
  rails generate migration create_model.name
  
find migration folder in db
add any other colums in create_table:
    t.type :name
    i.e. t.string :title

***t.timestamps adds both created at and updated at***

to delete table:
  rake db:rollback
then you can add any missed columns by starting again (if you want to add another column)
BUT BETTER To:::


Create new migration file:
  rails generate migration add_newcolumn_to_modelname
  (i.e. rails generate migration add_description_to_articles)
  
Go to new migration folder
Add column to new method:
  add_column :tablename, :attributename, :type
  (i.e. add_column :articles, :description, :text)

Also add these if didn't do t.timestamps:
  add_column :articles, :created_at, :datetime
  add_column :articles, :updated_at, :datetime


Then:
  rake db:migrate



To check database, go to rails console:
  rails console
  
  Article.all(shows all lines)
  
  Article(shows attributes and type of each)
  
  article = Article.new
  article.title = "This is..."
  article.description = "This is..."
  article.save
  
Note that times are automatically done  

  article
  'Shows the info of the object
  
Other methods of adding info:
  article = Article.new(title: "This is...", description: "This is...")
  article.save
  
  Article.create(title: "This is...", description: "This is...")
  'No need to save as this one goes directly


To edit Article
Grab article
Make change
Save article:

  article = Article.find(2) *This 2 is the id
  article.title = "New Title"
  article.save
  
To delete:
  article = Article.find(x)
  article.destroy
  
  


Validations enforce constraints on new entries to databse:

In model:
  validates :title, presence: true


If error in adding to database:
  article.errors.any?
  article.errors.full_messages
  
  
  
  
***
Adding functionality to webpage
***
  
Add the following to config/routes.rb:
  resources :articles
this adds a load of routes (rake routes to check)


***FORM HELPERS***
***(guides.rubyonrails.org/form_helpers.html)***

***CREATE***

syntax for form:
  <%= form_for @article do |f| %>
  <p>
    <%= f.label :title %><br/>
    <%= f.text_field :title %>
  </p>
  etc....
  
  <%= f.submit %>
  *submit button
  
to link submit button, create method in controller:

  Unvalidated:
    def create
      #This simply shows in browser:
      #render plain: params[:article].inspect
      @article = Article.new(article_params)
      #can not get infor directly from params
      @article.save
      redirect_to article_path(@article)
    end
  
  
  Validated:
  
  def create
    @article = Article.new(article_params)
    if @article.save
      flash[:notice] = "Article was successfully created"
      redirect_to article_path(@article)
    else
      render 'new'
    end
  end
  
  def show #Adds show method, this is where page redirects to after successful addition
    @article = Article.find(params[:id])
  end
  
  private
  
  def article_params #Gets parameters to new article
    params.require(:article).permit(:title, :description)
  end
  
To show this flash notice, this must be added to the
Overall body of the page. this is in:
views/layouts/application.html.erb
add in this code to the body:
  
  #for each msg, display it
  <% flash.each do |name, msg| %>
    <ul>
      <li><%= msg %></li>
    </ul>
  <% end %>
  
Also need to add to article/show.html.erb:

  <h1>Showing selected article</h1>

  <p>
    Title: <%= @article.title %>
  </p>

  <p>
    Description: <%= @article.description %>
  </p>

  

Then, to show the errors that have occured if article is not added:
This redirects to render 'new' so...
Add the following to to new view in articles: new.html.erb:

  <% if @article.errors.any? %>
  <h3>The following errors prevented the article from getting created:</h3>
  <ul>
    <% @article.errors.full_messages.each do |msg| %>
    <li><%= msg %></li>
    <% end %> 
  </ul>
  <% end %>
  #This adds in each error message in a list
  





***UPDATE***

Copy all code from new.html.erb to edit.html.erb
Uses same structure

Add edit (equiv to new method) method to article controller
  
  def edit
    @article = Article.find(params[:id])
  end
  
Also add update (equiv to create method) method to article controller

  def update
    @article = Article.find(params[:id])
    if @article.update(article_params)
      flash[:notice] = "Article was successfully updated"
      redirect_to article_path(@article)
    else
      render 'edit'
    end
  end
  
  
  
  ***
  Add link in page
  ***
  
  <%= link_to "This is where it links to", edit_article_path etc... %>